class _Node {
    constructor(value, next) {
        this.value = value;
        this.next = next;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
    }
     insertFirst(item) {
        this.head = new _Node(item, this.head);
    }
    insertLast(item) {
        if (this.head === null) {
            this.insertFirst(item);
        }
        else {
            let tempNode = this.head;
            while (tempNode.next !== null) {
                tempNode = tempNode.next;
            }
            tempNode.next = new _Node(item, null);
        }
    }
    find(item) { 
        // Start at the head
        let currNode = this.head;
        // If the list is empty
        if (!this.head) {
            return null;
        }
        // Check for the item 
        while (currNode.value !== item) {
            /* Return null if it's the end of the list 
               and the item is not on the list */
            if (currNode.next === null) {
                return null;
            }
            else {
                // Otherwise, keep looking 
                currNode = currNode.next;
            }
        }
        // Found it
        return currNode;
    }
    remove(item){ 
        // If the list is empty
        if (!this.head) {
            return null;
        }
        // If the node to be removed is head, make the next node head
        if (this.head.value === item) {
            this.head = this.head.next;
            return;
        }
        // Start at the head
        let currNode = this.head;
        // Keep track of previous
        let previousNode = this.head;

        while ((currNode !== null) && (currNode.value !== item)) {
            // Save the previous node 
            previousNode = currNode;
            currNode = currNode.next;
        }
        if (currNode === null) {
            console.log('Item not found');
            return;
        }
        previousNode.next = currNode.next;
    }
    insertBefore(item){
      let newNode = this.head;
           while (newNode.next !== null) {
                newNode = newNode.next;
            }
            newNode.next = new _Node(item, null);
    }
    

}


function main(str1,str2,str3,str4,str5,str6,str7,str8){
  let addFunction= new LinkedList()
  addFunction.insertFirst(str1)
  addFunction.insertFirst(str2)
  addFunction.insertFirst(str3)
  addFunction.insertFirst(str4)
  addFunction.insertFirst(str5)
  addFunction.insertLast(str6)
  addFunction.remove(str5)
  addFunction.insertBefore(str7)
  addFunction.insertBefore(str8)

  return new LinkedList()
}


console.log(main('SLL','Apollo','Boomer','Helo','Husker','Starbuck','Tauhida','Athena','Boomer','hotdog'))

